trigger:
  branches:
    include:
    - master
    - story/perf/*
    exclude:
    - develop

pr:
  - master
  - story/perf/*

pool: 
  vmImage: ubuntu-latest

variables:
  inputTestFile: k6_ci_runner.js
  archiveTestFile: $(inputTestFile).tar
  dockerTestDir: k6
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}: 
    mode: regression
  ${{ if eq(variables['Build.Reason'], 'IndividualCI') }}:
    mode: ci
steps:
- ${{ if eq(variables['Build.Reason'], 'IndividualCI') }}:
  - bash: |
      echo "We will us '$(Build.SourceBranchName)' as k6 exec name"
      echo "##vso[task.setvariable variable=k6exec]$(Build.SourceBranchName)" #alias really
      echo "Build because of $(Build.Reason)"
    displayName: Set k6 exec function
- ${{ if eq(variables['Build.Reason'], 'PullRequest') }}: 
  - bash: |
      echo "We will us '$(Build.SourceBranchName)' as k6 exec name"
      echo "##vso[task.setvariable variable=k6exec]regression" #alias really
      echo "Build because of $(Build.Reason)"
    displayName: Set k6 exec function
- bash: |
    #prevent docker/host mount issues
    mkdir -p $(pwd)/$(dockerTestDir)
    ls -alh
    #sudo groupadd -g 12345 k6
    #sudo useradd -u 12345 k6 -g k6
    #sudo chown k6:k6 $(pwd)/$(dockerTestDir)
    chmod -R 0777  $(pwd)/$(dockerTestDir)
- pwsh: |
      Write-Host "Running:"
      Write-Host "docker run --rm --entrypoint /bin/sh -i -v ${PWD}:/home/k6 loadimpact/k6 -c 'k6 archive -O $(dockerTestDir)/$(archiveTestFile) --include-system-env-vars=false  $(inputTestFile)'"
      docker run --rm --entrypoint /bin/sh -i -v ${PWD}:/home/k6 loadimpact/k6 -c 'k6 archive -O $(dockerTestDir)/$(archiveTestFile)  --include-system-env-vars=false  $(inputTestFile)'
      Write-Host "Produced:"
      ls
  displayName: Create test archive 
- bash: |
    ls -alh k6
    cp k6/* .
    
- task: k6-load-test@0
  inputs:
    filename: $(inputTestFile)
    args: -e mode=$(mode) -e exec=$(k6exec)
  displayName: Run archived test

- task: PublishPipelineArtifact@1
  condition: succeeded()
  inputs:
    path: $(dockerTestDir)/$(archiveTestFile)
    artifact: $(archiveTestFile)
  displayName: Publish test archive to build

- task: PublishPipelineArtifact@1
  condition: succeeded()
  inputs:
    path: results.csv
    artifact: results.csv
  displayName: Publish test results to build